Written Questions

Q1. Run the web crawler using the configurations located at src/main/config/written_question_1a.json and
    src/main/config/written_question_1b.json. The only difference between these configurations is that one always uses
    the sequential crawler and the other always uses the parallel crawler. Inspect the profile output in
    profileData.txt.

    If you are using a multi-processor computer, you should notice that SequentialWebCrawler#crawl and
    ParallelWebCrawler#crawl took about the same amount of time, but PageParserImpl#parse took much longer when run with
    the ParallelWebCrawler.

    Why did the parser take more time when run with ParallelWebCrawler?
    ANSWER: Parser in ParallelWebCrawler takes more time because of multi-threading. When each individual thread is started,
    it can be stopped, resumed, and its priority can change depending on how many threads or going (ie if it's at max), and so on.

Q2. Your manager ran your crawler on her old personal computer, using the configurations from Q1, and she notices that
    the sequential crawler actually outperforms the parallel crawler. She would like to know why.

    (a) Suggest one reason why the sequential web crawler was able to read more web pages than the parallel crawler.
        (Hint: Try setting "parallelism" to 1 in the JSON configs to simulate your manager's computer.)
        ANSWER: Her computer has only one processor. Parallel outperforms when multi-processor computer.
    (b) Suggest one scenario in which the parallel web crawler will almost certainly perform better than the sequential
        crawler. Why will it perform better?
        ANSWER: Getting a new computer that is multi-processor will make parallel web crawler outperform sequential. The
        reason is due to simultaneous execution of threads and running multiple threads at the same time.

Q3. Analyze your method profiler through the lens of Aspect Oriented Programming, by answering the following questions:

    (a) What cross-cutting concern is being addressed by the com.udacity.webcrawler.profiler.Profiler class?
    ANSWER:  exception handling (IllegalArgumentException, IOException)
    (b) What are the join points of the Profiler in the web crawler program?
    ANSWER:methods writeData() and wrap()

Q4. Identify three (3) different design patterns used in this project, and explain which interfaces, classes, and/or
    libraries use or implement those design patterns.

    For each pattern, name one thing about the pattern that you LIKED, and one thing you DISLIKED. If you did not like
    anything, you can name two things you disliked.
    ANSWER:

    1. Component - used  for Builder class
    What I liked: It creates some kind of security and encapsulation
    What I disliked: when we aren't using a singleton design I feel like you can use default or other types of access
    for variables. this is my opinion as an inexperienced developer

    2.Decorator - used CrawlerConfiguration class JsonProperty (startPages, ignoreUrls, etc)
    What I liked: it is more readable
    What I disliked: it took a long time for me to debug when I was writing it. If there is misspelling, it wont run but
    the IDE can't catch it

    3.Proxy - used java.lang.reflect.Proxy class in the profiler package, specifically ProfilerImpl class
    What I liked: It makes it easy to control requests or implementations
    What I disliked: it's a super hard concept to understand given the time constraints we had for this project and
    module.
